(()=>{"use strict";var e=function(t,r){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},e(t,r)};function t(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function n(){this.constructor=t}e(t,r),t.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}var r=function(){return r=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},r.apply(this,arguments)};function n(e,t){var r,n,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(s){return function(c){return function(s){if(r)throw new TypeError("Generator is already executing.");for(;i&&(i=0,s[0]&&(u=0)),u;)try{if(r=1,n&&(o=2&s[0]?n.return:s[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,s[1])).done)return o;switch(n=0,o&&(s=[2&s[0],o.value]),s[0]){case 0:case 1:o=s;break;case 4:return u.label++,{value:s[1],done:!1};case 5:u.label++,n=s[1],s=[0];continue;case 7:s=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==s[0]&&2!==s[0])){u=0;continue}if(3===s[0]&&(!o||s[1]>o[0]&&s[1]<o[3])){u.label=s[1];break}if(6===s[0]&&u.label<o[1]){u.label=o[1],o=s;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(s);break}o[2]&&u.ops.pop(),u.trys.pop();continue}s=t.call(e,u)}catch(e){s=[6,e],n=0}finally{r=o=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,c])}}}function o(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function i(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,i=r.call(e),u=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u}function u(e,t,r){if(r||2===arguments.length)for(var n,o=0,i=t.length;o<i;o++)!n&&o in t||(n||(n=Array.prototype.slice.call(t,0,o)),n[o]=t[o]);return e.concat(n||Array.prototype.slice.call(t))}function s(e){return this instanceof s?(this.v=e,this):new s(e)}function c(e){return"function"==typeof e}function a(e){return function(t){if(function(e){return c(null==e?void 0:e.lift)}(t))return t.lift((function(t){try{return e(t,this)}catch(e){this.error(e)}}));throw new TypeError("Unable to lift unknown Observable type")}}function l(e){var t=e((function(e){Error.call(e),e.stack=(new Error).stack}));return t.prototype=Object.create(Error.prototype),t.prototype.constructor=t,t}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;var f=l((function(e){return function(t){e(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(e,t){return t+1+") "+e.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t}}));function d(e,t){if(e){var r=e.indexOf(t);0<=r&&e.splice(r,1)}}var h=function(){function e(e){this.initialTeardown=e,this.closed=!1,this._parentage=null,this._finalizers=null}var t;return e.prototype.unsubscribe=function(){var e,t,r,n,s;if(!this.closed){this.closed=!0;var a=this._parentage;if(a)if(this._parentage=null,Array.isArray(a))try{for(var l=o(a),d=l.next();!d.done;d=l.next())d.value.remove(this)}catch(t){e={error:t}}finally{try{d&&!d.done&&(t=l.return)&&t.call(l)}finally{if(e)throw e.error}}else a.remove(this);var h=this.initialTeardown;if(c(h))try{h()}catch(e){s=e instanceof f?e.errors:[e]}var p=this._finalizers;if(p){this._finalizers=null;try{for(var y=o(p),b=y.next();!b.done;b=y.next()){var m=b.value;try{v(m)}catch(e){s=null!=s?s:[],e instanceof f?s=u(u([],i(s)),i(e.errors)):s.push(e)}}}catch(e){r={error:e}}finally{try{b&&!b.done&&(n=y.return)&&n.call(y)}finally{if(r)throw r.error}}}if(s)throw new f(s)}},e.prototype.add=function(t){var r;if(t&&t!==this)if(this.closed)v(t);else{if(t instanceof e){if(t.closed||t._hasParent(this))return;t._addParent(this)}(this._finalizers=null!==(r=this._finalizers)&&void 0!==r?r:[]).push(t)}},e.prototype._hasParent=function(e){var t=this._parentage;return t===e||Array.isArray(t)&&t.includes(e)},e.prototype._addParent=function(e){var t=this._parentage;this._parentage=Array.isArray(t)?(t.push(e),t):t?[t,e]:e},e.prototype._removeParent=function(e){var t=this._parentage;t===e?this._parentage=null:Array.isArray(t)&&d(t,e)},e.prototype.remove=function(t){var r=this._finalizers;r&&d(r,t),t instanceof e&&t._removeParent(this)},e.EMPTY=((t=new e).closed=!0,t),e}();function p(e){return e instanceof h||e&&"closed"in e&&c(e.remove)&&c(e.add)&&c(e.unsubscribe)}function v(e){c(e)?e():e.unsubscribe()}h.EMPTY;var y={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},b={setTimeout:function(e,t){for(var r=[],n=2;n<arguments.length;n++)r[n-2]=arguments[n];var o=b.delegate;return(null==o?void 0:o.setTimeout)?o.setTimeout.apply(o,u([e,t],i(r))):setTimeout.apply(void 0,u([e,t],i(r)))},clearTimeout:function(e){var t=b.delegate;return((null==t?void 0:t.clearTimeout)||clearTimeout)(e)},delegate:void 0};function m(e){b.setTimeout((function(){var t=y.onUnhandledError;if(!t)throw e;t(e)}))}function w(){}var g=x("C",void 0,void 0);function x(e,t,r){return{kind:e,value:t,error:r}}var S=null,_=function(e){function r(t){var r=e.call(this)||this;return r.isStopped=!1,t?(r.destination=t,p(t)&&t.add(r)):r.destination=I,r}return t(r,e),r.create=function(e,t,r){return new A(e,t,r)},r.prototype.next=function(e){this.isStopped?j(function(e){return x("N",e,void 0)}(e),this):this._next(e)},r.prototype.error=function(e){this.isStopped?j(x("E",void 0,e),this):(this.isStopped=!0,this._error(e))},r.prototype.complete=function(){this.isStopped?j(g,this):(this.isStopped=!0,this._complete())},r.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this),this.destination=null)},r.prototype._next=function(e){this.destination.next(e)},r.prototype._error=function(e){try{this.destination.error(e)}finally{this.unsubscribe()}},r.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},r}(h),E=Function.prototype.bind;function T(e,t){return E.call(e,t)}var P=function(){function e(e){this.partialObserver=e}return e.prototype.next=function(e){var t=this.partialObserver;if(t.next)try{t.next(e)}catch(e){O(e)}},e.prototype.error=function(e){var t=this.partialObserver;if(t.error)try{t.error(e)}catch(e){O(e)}else O(e)},e.prototype.complete=function(){var e=this.partialObserver;if(e.complete)try{e.complete()}catch(e){O(e)}},e}(),A=function(e){function r(t,r,n){var o,i,u=e.call(this)||this;return c(t)||!t?o={next:null!=t?t:void 0,error:null!=r?r:void 0,complete:null!=n?n:void 0}:u&&y.useDeprecatedNextContext?((i=Object.create(t)).unsubscribe=function(){return u.unsubscribe()},o={next:t.next&&T(t.next,i),error:t.error&&T(t.error,i),complete:t.complete&&T(t.complete,i)}):o=t,u.destination=new P(o),u}return t(r,e),r}(_);function O(e){var t;y.useDeprecatedSynchronousErrorHandling?(t=e,y.useDeprecatedSynchronousErrorHandling&&S&&(S.errorThrown=!0,S.error=t)):m(e)}function j(e,t){var r=y.onStoppedNotification;r&&b.setTimeout((function(){return r(e,t)}))}var I={closed:!0,next:w,error:function(e){throw e},complete:w};function L(e,t,r,n,o){return new R(e,t,r,n,o)}var R=function(e){function r(t,r,n,o,i,u){var s=e.call(this,t)||this;return s.onFinalize=i,s.shouldUnsubscribe=u,s._next=r?function(e){try{r(e)}catch(e){t.error(e)}}:e.prototype._next,s._error=o?function(e){try{o(e)}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._error,s._complete=n?function(){try{n()}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._complete,s}return t(r,e),r.prototype.unsubscribe=function(){var t;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var r=this.closed;e.prototype.unsubscribe.call(this),!r&&(null===(t=this.onFinalize)||void 0===t||t.call(this))}},r}(_);function k(e,t){return a((function(r,n){var o=0;r.subscribe(L(n,(function(r){n.next(e.call(t,r,o++))})))}))}var H="function"==typeof Symbol&&Symbol.observable||"@@observable";function D(e){return e}var U=function(){function e(e){e&&(this._subscribe=e)}return e.prototype.lift=function(t){var r=new e;return r.source=this,r.operator=t,r},e.prototype.subscribe=function(e,t,r){var n,o=this,i=(n=e)&&n instanceof _||function(e){return e&&c(e.next)&&c(e.error)&&c(e.complete)}(n)&&p(n)?e:new A(e,t,r);return function(e){if(y.useDeprecatedSynchronousErrorHandling){var t=!S;if(t&&(S={errorThrown:!1,error:null}),e(),t){var r=S,n=r.errorThrown,o=r.error;if(S=null,n)throw o}}else e()}((function(){var e=o,t=e.operator,r=e.source;i.add(t?t.call(i,r):r?o._subscribe(i):o._trySubscribe(i))})),i},e.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(t){e.error(t)}},e.prototype.forEach=function(e,t){var r=this;return new(t=C(t))((function(t,n){var o=new A({next:function(t){try{e(t)}catch(e){n(e),o.unsubscribe()}},error:n,complete:t});r.subscribe(o)}))},e.prototype._subscribe=function(e){var t;return null===(t=this.source)||void 0===t?void 0:t.subscribe(e)},e.prototype[H]=function(){return this},e.prototype.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return(0===(r=e).length?D:1===r.length?r[0]:function(e){return r.reduce((function(e,t){return t(e)}),e)})(this);var r},e.prototype.toPromise=function(e){var t=this;return new(e=C(e))((function(e,r){var n;t.subscribe((function(e){return n=e}),(function(e){return r(e)}),(function(){return e(n)}))}))},e.create=function(t){return new e(t)},e}();function C(e){var t;return null!==(t=null!=e?e:y.Promise)&&void 0!==t?t:Promise}function N(e){switch(e.responseType){case"json":if("response"in e)return e.response;var t=e;return JSON.parse(t.responseText);case"document":return e.responseXML;default:return"response"in e?e.response:(t=e).responseText}}var q=function(e,t,r,n){void 0===n&&(n="download_load"),this.originalEvent=e,this.xhr=t,this.request=r,this.type=n;var o=t.status,i=t.responseType;this.status=null!=o?o:0,this.responseType=null!=i?i:"";var u=t.getAllResponseHeaders();this.responseHeaders=u?u.split("\n").reduce((function(e,t){var r=t.indexOf(": ");return e[t.slice(0,r)]=t.slice(r+2),e}),{}):{},this.response=N(t);var s=e.loaded,c=e.total;this.loaded=s,this.total=c},z=l((function(e){return function(e,t,r){var n;this.message=e,this.name="AjaxError",this.xhr=t,this.request=r,this.status=t.status,this.responseType=t.responseType;try{n=N(t)}catch(e){n=t.responseText}this.response=n}})),M=function(){function e(e,t){return z.call(this,"ajax timeout",e,t),this.name="AjaxTimeoutError",this}return e.prototype=Object.create(z.prototype),e}();var F=k((function(e){return e.response}));var X,B=(X=function(e){var t;return t="string"==typeof e?{url:e}:e,new U((function(e){var n,o,i,u=r({async:!0,crossDomain:!1,withCredentials:!1,method:"GET",timeout:0,responseType:"json"},t),s=u.queryParams,c=u.body,a=u.headers,l=u.url;if(!l)throw new TypeError("url is required");if(s)if(l.includes("?")){var f=l.split("?");if(2<f.length)throw new TypeError("invalid url");i=new URLSearchParams(f[1]),new URLSearchParams(s).forEach((function(e,t){return i.set(t,e)})),l=f[0]+"?"+i}else l=l+"?"+(i=new URLSearchParams(s));var d={};if(a)for(var h in a)a.hasOwnProperty(h)&&(d[h.toLowerCase()]=a[h]);var p=u.crossDomain;p||"x-requested-with"in d||(d["x-requested-with"]="XMLHttpRequest");var v=u.withCredentials,y=u.xsrfCookieName,b=u.xsrfHeaderName;if((v||!p)&&y&&b){var m=null!==(o=null===(n=null===document||void 0===document?void 0:document.cookie.match(new RegExp("(^|;\\s*)("+y+")=([^;]*)")))||void 0===n?void 0:n.pop())&&void 0!==o?o:"";m&&(d[b]=m)}var w,g=function(e,t){var r;if(!e||"string"==typeof e||function(e){return"undefined"!=typeof FormData&&e instanceof FormData}(e)||function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams}(e)||function(e){return Q(e,"ArrayBuffer")}(e)||function(e){return Q(e,"File")}(e)||function(e){return Q(e,"Blob")}(e)||function(e){return"undefined"!=typeof ReadableStream&&e instanceof ReadableStream}(e))return e;if(function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView(e)}(e))return e.buffer;if("object"==typeof e)return t["content-type"]=null!==(r=t["content-type"])&&void 0!==r?r:"application/json;charset=utf-8",JSON.stringify(e);throw new TypeError("Unknown body type")}(c,d),x=r(r({},u),{url:l,headers:d,body:g});w=t.createXHR?t.createXHR():new XMLHttpRequest;var S=t.progressSubscriber,_=t.includeDownloadProgress,E=void 0!==_&&_,T=t.includeUploadProgress,P=void 0!==T&&T,A=function(t,r){w.addEventListener(t,(function(){var t,n=r();null===(t=null==S?void 0:S.error)||void 0===t||t.call(S,n),e.error(n)}))};A("timeout",(function(){return new M(w,x)})),A("abort",(function(){return new z("aborted",w,x)}));var O=function(e,t){return new q(t,w,x,e+"_"+t.type)},j=function(t,r,n){t.addEventListener(r,(function(t){e.next(O(n,t))}))};P&&[Y,$,V].forEach((function(e){return j(w.upload,e,G)})),S&&[Y,$].forEach((function(e){return w.upload.addEventListener(e,(function(e){var t;return null===(t=null==S?void 0:S.next)||void 0===t?void 0:t.call(S,e)}))})),E&&[Y,$].forEach((function(e){return j(w,e,J)}));var I=function(t){var r="ajax error"+(t?" "+t:"");e.error(new z(r,w,x))};w.addEventListener("error",(function(e){var t;null===(t=null==S?void 0:S.error)||void 0===t||t.call(S,e),I()})),w.addEventListener(V,(function(t){var r,n,o=w.status;if(o<400){null===(r=null==S?void 0:S.complete)||void 0===r||r.call(S);var i=void 0;try{i=O(J,t)}catch(t){return void e.error(t)}e.next(i),e.complete()}else null===(n=null==S?void 0:S.error)||void 0===n||n.call(S,t),I(o)}));var L=x.user,R=x.method,k=x.async;for(var h in L?w.open(R,l,k,L,x.password):w.open(R,l,k),k&&(w.timeout=x.timeout,w.responseType=x.responseType),"withCredentials"in w&&(w.withCredentials=x.withCredentials),d)d.hasOwnProperty(h)&&w.setRequestHeader(h,d[h]);return g?w.send(g):w.send(),function(){w&&4!==w.readyState&&w.abort()}}))},X.get=function(e,t){return B({method:"GET",url:e,headers:t})},X.post=function(e,t,r){return B({method:"POST",url:e,body:t,headers:r})},X.delete=function(e,t){return B({method:"DELETE",url:e,headers:t})},X.put=function(e,t,r){return B({method:"PUT",url:e,body:t,headers:r})},X.patch=function(e,t,r){return B({method:"PATCH",url:e,body:t,headers:r})},X.getJSON=function(e,t){return F(B({method:"GET",url:e,headers:t}))},X),G="upload",J="download",Y="loadstart",$="progress",V="load",K=Object.prototype.toString;function Q(e,t){return K.call(e)==="[object "+t+"]"}var W=function(e){return e&&"number"==typeof e.length&&"function"!=typeof e};function Z(e){return c(null==e?void 0:e.then)}function ee(e){return c(e[H])}function te(e){return Symbol.asyncIterator&&c(null==e?void 0:e[Symbol.asyncIterator])}function re(e){return new TypeError("You provided "+(null!==e&&"object"==typeof e?"an invalid object":"'"+e+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var ne="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function oe(e){return c(null==e?void 0:e[ne])}function ie(e){return function(e,t,r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,o=r.apply(e,t||[]),i=[];return n={},u("next"),u("throw"),u("return"),n[Symbol.asyncIterator]=function(){return this},n;function u(e){o[e]&&(n[e]=function(t){return new Promise((function(r,n){i.push([e,t,r,n])>1||c(e,t)}))})}function c(e,t){try{(r=o[e](t)).value instanceof s?Promise.resolve(r.value.v).then(a,l):f(i[0][2],r)}catch(e){f(i[0][3],e)}var r}function a(e){c("next",e)}function l(e){c("throw",e)}function f(e,t){e(t),i.shift(),i.length&&c(i[0][0],i[0][1])}}(this,arguments,(function(){var t,r,o;return n(this,(function(n){switch(n.label){case 0:t=e.getReader(),n.label=1;case 1:n.trys.push([1,,9,10]),n.label=2;case 2:return[4,s(t.read())];case 3:return r=n.sent(),o=r.value,r.done?[4,s(void 0)]:[3,5];case 4:return[2,n.sent()];case 5:return[4,s(o)];case 6:return[4,n.sent()];case 7:return n.sent(),[3,2];case 8:return[3,10];case 9:return t.releaseLock(),[7];case 10:return[2]}}))}))}function ue(e){return c(null==e?void 0:e.getReader)}function se(e){if(e instanceof U)return e;if(null!=e){if(ee(e))return i=e,new U((function(e){var t=i[H]();if(c(t.subscribe))return t.subscribe(e);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(W(e))return n=e,new U((function(e){for(var t=0;t<n.length&&!e.closed;t++)e.next(n[t]);e.complete()}));if(Z(e))return r=e,new U((function(e){r.then((function(t){e.closed||(e.next(t),e.complete())}),(function(t){return e.error(t)})).then(null,m)}));if(te(e))return ce(e);if(oe(e))return t=e,new U((function(e){var r,n;try{for(var i=o(t),u=i.next();!u.done;u=i.next()){var s=u.value;if(e.next(s),e.closed)return}}catch(e){r={error:e}}finally{try{u&&!u.done&&(n=i.return)&&n.call(i)}finally{if(r)throw r.error}}e.complete()}));if(ue(e))return ce(ie(e))}var t,r,n,i;throw re(e)}function ce(e){return new U((function(t){(function(e,t){var r,i,u,s,c,a,l,f;return c=this,a=void 0,f=function(){var c,a;return n(this,(function(n){switch(n.label){case 0:n.trys.push([0,5,6,11]),r=function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,r=e[Symbol.asyncIterator];return r?r.call(e):(e=o(e),t={},n("next"),n("throw"),n("return"),t[Symbol.asyncIterator]=function(){return this},t);function n(r){t[r]=e[r]&&function(t){return new Promise((function(n,o){!function(e,t,r,n){Promise.resolve(n).then((function(t){e({value:t,done:r})}),t)}(n,o,(t=e[r](t)).done,t.value)}))}}}(e),n.label=1;case 1:return[4,r.next()];case 2:if((i=n.sent()).done)return[3,4];if(c=i.value,t.next(c),t.closed)return[2];n.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return a=n.sent(),u={error:a},[3,11];case 6:return n.trys.push([6,,9,10]),i&&!i.done&&(s=r.return)?[4,s.call(r)]:[3,8];case 7:n.sent(),n.label=8;case 8:return[3,10];case 9:if(u)throw u.error;return[7];case 10:return[7];case 11:return t.complete(),[2]}}))},new((l=void 0)||(l=Promise))((function(e,t){function r(e){try{o(f.next(e))}catch(e){t(e)}}function n(e){try{o(f.throw(e))}catch(e){t(e)}}function o(t){var o;t.done?e(t.value):(o=t.value,o instanceof l?o:new l((function(e){e(o)}))).then(r,n)}o((f=f.apply(c,a||[])).next())}))})(e,t).catch((function(e){return t.error(e)}))}))}function ae(e){return a((function(t,r){var n,o=null,i=!1;o=t.subscribe(L(r,void 0,void 0,(function(u){n=se(e(u,ae(e)(t))),o?(o.unsubscribe(),o=null,n.subscribe(r)):i=!0}))),i&&(o.unsubscribe(),o=null,n.subscribe(r))}))}var le=function(e){function r(t,r){return e.call(this)||this}return t(r,e),r.prototype.schedule=function(e,t){return void 0===t&&(t=0),this},r}(h),fe={setInterval:function(e,t){for(var r=[],n=2;n<arguments.length;n++)r[n-2]=arguments[n];var o=fe.delegate;return(null==o?void 0:o.setInterval)?o.setInterval.apply(o,u([e,t],i(r))):setInterval.apply(void 0,u([e,t],i(r)))},clearInterval:function(e){var t=fe.delegate;return((null==t?void 0:t.clearInterval)||clearInterval)(e)},delegate:void 0},de=function(e){function r(t,r){var n=e.call(this,t,r)||this;return n.scheduler=t,n.work=r,n.pending=!1,n}return t(r,e),r.prototype.schedule=function(e,t){var r;if(void 0===t&&(t=0),this.closed)return this;this.state=e;var n=this.id,o=this.scheduler;return null!=n&&(this.id=this.recycleAsyncId(o,n,t)),this.pending=!0,this.delay=t,this.id=null!==(r=this.id)&&void 0!==r?r:this.requestAsyncId(o,this.id,t),this},r.prototype.requestAsyncId=function(e,t,r){return void 0===r&&(r=0),fe.setInterval(e.flush.bind(e,this),r)},r.prototype.recycleAsyncId=function(e,t,r){if(void 0===r&&(r=0),null!=r&&this.delay===r&&!1===this.pending)return t;null!=t&&fe.clearInterval(t)},r.prototype.execute=function(e,t){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var r=this._execute(e,t);if(r)return r;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},r.prototype._execute=function(e,t){var r,n=!1;try{this.work(e)}catch(e){n=!0,r=e||new Error("Scheduled action threw falsy error")}if(n)return this.unsubscribe(),r},r.prototype.unsubscribe=function(){if(!this.closed){var t=this.id,r=this.scheduler,n=r.actions;this.work=this.state=this.scheduler=null,this.pending=!1,d(n,this),null!=t&&(this.id=this.recycleAsyncId(r,t,null)),this.delay=null,e.prototype.unsubscribe.call(this)}},r}(le),he={now:function(){return(he.delegate||Date).now()},delegate:void 0},pe=function(){function e(t,r){void 0===r&&(r=e.now),this.schedulerActionCtor=t,this.now=r}return e.prototype.schedule=function(e,t,r){return void 0===t&&(t=0),new this.schedulerActionCtor(this,e).schedule(r,t)},e.now=he.now,e}(),ve=new(function(e){function r(t,r){void 0===r&&(r=pe.now);var n=e.call(this,t,r)||this;return n.actions=[],n._active=!1,n}return t(r,e),r.prototype.flush=function(e){var t=this.actions;if(this._active)t.push(e);else{var r;this._active=!0;do{if(r=e.execute(e.state,e.delay))break}while(e=t.shift());if(this._active=!1,r){for(;e=t.shift();)e.unsubscribe();throw r}}},r}(pe))(de),ye=ve;function be(e){return e&&c(e.schedule)}function me(e,t,r,n,o){void 0===n&&(n=0),void 0===o&&(o=!1);var i=t.schedule((function(){r(),o?e.add(this.schedule(null,n)):this.unsubscribe()}),n);if(e.add(i),!o)return i}function we(e,t){return void 0===t&&(t=0),a((function(r,n){r.subscribe(L(n,(function(r){return me(n,e,(function(){return n.next(r)}),t)}),(function(){return me(n,e,(function(){return n.complete()}),t)}),(function(r){return me(n,e,(function(){return n.error(r)}),t)})))}))}function ge(e,t){return void 0===t&&(t=0),a((function(r,n){n.add(e.schedule((function(){return r.subscribe(n)}),t))}))}function xe(e,t){if(!e)throw new Error("Iterable cannot be null");return new U((function(r){me(r,t,(function(){var n=e[Symbol.asyncIterator]();me(r,t,(function(){n.next().then((function(e){e.done?r.complete():r.next(e.value)}))}),0,!0)}))}))}function Se(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=function(e){return be((t=e)[t.length-1])?e.pop():void 0;var t}(e);return function(e,t){return t?function(e,t){if(null!=e){if(ee(e))return function(e,t){return se(e).pipe(ge(t),we(t))}(e,t);if(W(e))return function(e,t){return new U((function(r){var n=0;return t.schedule((function(){n===e.length?r.complete():(r.next(e[n++]),r.closed||this.schedule())}))}))}(e,t);if(Z(e))return function(e,t){return se(e).pipe(ge(t),we(t))}(e,t);if(te(e))return xe(e,t);if(oe(e))return function(e,t){return new U((function(r){var n;return me(r,t,(function(){n=e[ne](),me(r,t,(function(){var e,t,o;try{t=(e=n.next()).value,o=e.done}catch(e){return void r.error(e)}o?r.complete():r.next(t)}),0,!0)})),function(){return c(null==n?void 0:n.return)&&n.return()}}))}(e,t);if(ue(e))return function(e,t){return xe(ie(e),t)}(e,t)}throw re(e)}(e,t):se(e)}(e,r)}const _e=document.querySelector(".messages"),Ee=(Pe=1e3,void 0===Pe&&(Pe=0),void 0===Ae&&(Ae=ve),Pe<0&&(Pe=0),function(e,t,r){void 0===e&&(e=0),void 0===r&&(r=ye);var n=-1;return null!=t&&(be(t)?r=t:n=t),new U((function(t){var o,i=(o=e)instanceof Date&&!isNaN(o)?+e-r.now():e;i<0&&(i=0);var u=0;return r.schedule((function(){t.closed||(t.next(u++),0<=n?this.schedule(void 0,n):t.complete())}),i)}))}(Pe,Pe,Ae)).pipe((Te=()=>B.getJSON("http://localhost:7070/api/messages").pipe(k((e=>e.messages)),ae((e=>(console.log("error: ",e),Se(e))))),a((function(e,t){var r=null,n=!1,o=function(){return n&&!r&&t.complete()};e.subscribe(L(t,(function(e){null==r||r.unsubscribe();0;se(Te()).subscribe(r=L(t,(function(e){return t.next(e)}),(function(){r=null,o()})))}),(function(){n=!0,o()})))})))).subscribe((e=>{!function(e){_e.innerHTML="",e.forEach((e=>{const t=(r=e.subject).length>15?r.slice(0,15)+"...":r;var r;const n=new Date(e.received).toLocaleString("ru-Ru",{year:"2-digit",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit"});n.replace(/[,%]/g,"");const o=`<div class="message">\n      <p>${e.from}</p>\n      <p>${t}</p>\n      <p>${n}</p>\n      </div>`;_e.insertAdjacentHTML("afterbegin",o)}))}(e)}));var Te,Pe,Ae;setTimeout((()=>{Ee.unsubscribe(),_e.insertAdjacentHTML("beforebegin",'<p class="text">Новых сообщений нет</p>')}),5e3)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,